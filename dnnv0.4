{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled6.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/olegal87/Oleg_Galimov/blob/master/dnnv0.4\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RvdTgbtQFfIM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7CjCwHenFqE0",
        "colab_type": "code",
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7Ci8vIE1heCBhbW91bnQgb2YgdGltZSB0byBibG9jayB3YWl0aW5nIGZvciB0aGUgdXNlci4KY29uc3QgRklMRV9DSEFOR0VfVElNRU9VVF9NUyA9IDMwICogMTAwMDsKCmZ1bmN0aW9uIF91cGxvYWRGaWxlcyhpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IHN0ZXBzID0gdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKTsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIC8vIENhY2hlIHN0ZXBzIG9uIHRoZSBvdXRwdXRFbGVtZW50IHRvIG1ha2UgaXQgYXZhaWxhYmxlIGZvciB0aGUgbmV4dCBjYWxsCiAgLy8gdG8gdXBsb2FkRmlsZXNDb250aW51ZSBmcm9tIFB5dGhvbi4KICBvdXRwdXRFbGVtZW50LnN0ZXBzID0gc3RlcHM7CgogIHJldHVybiBfdXBsb2FkRmlsZXNDb250aW51ZShvdXRwdXRJZCk7Cn0KCi8vIFRoaXMgaXMgcm91Z2hseSBhbiBhc3luYyBnZW5lcmF0b3IgKG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXIgeWV0KSwKLy8gd2hlcmUgdGhlcmUgYXJlIG11bHRpcGxlIGFzeW5jaHJvbm91cyBzdGVwcyBhbmQgdGhlIFB5dGhvbiBzaWRlIGlzIGdvaW5nCi8vIHRvIHBvbGwgZm9yIGNvbXBsZXRpb24gb2YgZWFjaCBzdGVwLgovLyBUaGlzIHVzZXMgYSBQcm9taXNlIHRvIGJsb2NrIHRoZSBweXRob24gc2lkZSBvbiBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcCwKLy8gdGhlbiBwYXNzZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJldmlvdXMgc3RlcCBhcyB0aGUgaW5wdXQgdG8gdGhlIG5leHQgc3RlcC4KZnVuY3Rpb24gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpIHsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIGNvbnN0IHN0ZXBzID0gb3V0cHV0RWxlbWVudC5zdGVwczsKCiAgY29uc3QgbmV4dCA9IHN0ZXBzLm5leHQob3V0cHV0RWxlbWVudC5sYXN0UHJvbWlzZVZhbHVlKTsKICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5leHQudmFsdWUucHJvbWlzZSkudGhlbigodmFsdWUpID0+IHsKICAgIC8vIENhY2hlIHRoZSBsYXN0IHByb21pc2UgdmFsdWUgdG8gbWFrZSBpdCBhdmFpbGFibGUgdG8gdGhlIG5leHQKICAgIC8vIHN0ZXAgb2YgdGhlIGdlbmVyYXRvci4KICAgIG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSA9IHZhbHVlOwogICAgcmV0dXJuIG5leHQudmFsdWUucmVzcG9uc2U7CiAgfSk7Cn0KCi8qKgogKiBHZW5lcmF0b3IgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGJldHdlZW4gZWFjaCBhc3luYyBzdGVwIG9mIHRoZSB1cGxvYWQKICogcHJvY2Vzcy4KICogQHBhcmFtIHtzdHJpbmd9IGlucHV0SWQgRWxlbWVudCBJRCBvZiB0aGUgaW5wdXQgZmlsZSBwaWNrZXIgZWxlbWVudC4KICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIG91dHB1dCBkaXNwbGF5LgogKiBAcmV0dXJuIHshSXRlcmFibGU8IU9iamVjdD59IEl0ZXJhYmxlIG9mIG5leHQgc3RlcHMuCiAqLwpmdW5jdGlvbiogdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKSB7CiAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5wdXRJZCk7CiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gZmFsc2U7CgogIGNvbnN0IG91dHB1dEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvdXRwdXRJZCk7CiAgb3V0cHV0RWxlbWVudC5pbm5lckhUTUwgPSAnJzsKCiAgY29uc3QgcGlja2VkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsKICAgICAgcmVzb2x2ZShlLnRhcmdldC5maWxlcyk7CiAgICB9KTsKICB9KTsKCiAgY29uc3QgY2FuY2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgaW5wdXRFbGVtZW50LnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2FuY2VsKTsKICBjYW5jZWwudGV4dENvbnRlbnQgPSAnQ2FuY2VsIHVwbG9hZCc7CiAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBjYW5jZWwub25jbGljayA9ICgpID0+IHsKICAgICAgcmVzb2x2ZShudWxsKTsKICAgIH07CiAgfSk7CgogIC8vIENhbmNlbCB1cGxvYWQgaWYgdXNlciBoYXNuJ3QgcGlja2VkIGFueXRoaW5nIGluIHRpbWVvdXQuCiAgY29uc3QgdGltZW91dFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9LCBGSUxFX0NIQU5HRV9USU1FT1VUX01TKTsKICB9KTsKCiAgLy8gV2FpdCBmb3IgdGhlIHVzZXIgdG8gcGljayB0aGUgZmlsZXMuCiAgY29uc3QgZmlsZXMgPSB5aWVsZCB7CiAgICBwcm9taXNlOiBQcm9taXNlLnJhY2UoW3BpY2tlZFByb21pc2UsIHRpbWVvdXRQcm9taXNlLCBjYW5jZWxQcm9taXNlXSksCiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdzdGFydGluZycsCiAgICB9CiAgfTsKCiAgaWYgKCFmaWxlcykgewogICAgcmV0dXJuIHsKICAgICAgcmVzcG9uc2U6IHsKICAgICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICAgIH0KICAgIH07CiAgfQoKICBjYW5jZWwucmVtb3ZlKCk7CgogIC8vIERpc2FibGUgdGhlIGlucHV0IGVsZW1lbnQgc2luY2UgZnVydGhlciBwaWNrcyBhcmUgbm90IGFsbG93ZWQuCiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gdHJ1ZTsKCiAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7CiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICBsaS5hcHBlbmQoc3BhbihmaWxlLm5hbWUsIHtmb250V2VpZ2h0OiAnYm9sZCd9KSk7CiAgICBsaS5hcHBlbmQoc3BhbigKICAgICAgICBgKCR7ZmlsZS50eXBlIHx8ICduL2EnfSkgLSAke2ZpbGUuc2l6ZX0gYnl0ZXMsIGAgKwogICAgICAgIGBsYXN0IG1vZGlmaWVkOiAkewogICAgICAgICAgICBmaWxlLmxhc3RNb2RpZmllZERhdGUgPyBmaWxlLmxhc3RNb2RpZmllZERhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCkgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbi9hJ30gLSBgKSk7CiAgICBjb25zdCBwZXJjZW50ID0gc3BhbignMCUgZG9uZScpOwogICAgbGkuYXBwZW5kQ2hpbGQocGVyY2VudCk7CgogICAgb3V0cHV0RWxlbWVudC5hcHBlbmRDaGlsZChsaSk7CgogICAgY29uc3QgZmlsZURhdGFQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7CiAgICAgICAgcmVzb2x2ZShlLnRhcmdldC5yZXN1bHQpOwogICAgICB9OwogICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7CiAgICB9KTsKICAgIC8vIFdhaXQgZm9yIHRoZSBkYXRhIHRvIGJlIHJlYWR5LgogICAgbGV0IGZpbGVEYXRhID0geWllbGQgewogICAgICBwcm9taXNlOiBmaWxlRGF0YVByb21pc2UsCiAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgYWN0aW9uOiAnY29udGludWUnLAogICAgICB9CiAgICB9OwoKICAgIC8vIFVzZSBhIGNodW5rZWQgc2VuZGluZyB0byBhdm9pZCBtZXNzYWdlIHNpemUgbGltaXRzLiBTZWUgYi82MjExNTY2MC4KICAgIGxldCBwb3NpdGlvbiA9IDA7CiAgICB3aGlsZSAocG9zaXRpb24gPCBmaWxlRGF0YS5ieXRlTGVuZ3RoKSB7CiAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKGZpbGVEYXRhLmJ5dGVMZW5ndGggLSBwb3NpdGlvbiwgTUFYX1BBWUxPQURfU0laRSk7CiAgICAgIGNvbnN0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoZmlsZURhdGEsIHBvc2l0aW9uLCBsZW5ndGgpOwogICAgICBwb3NpdGlvbiArPSBsZW5ndGg7CgogICAgICBjb25zdCBiYXNlNjQgPSBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY2h1bmspKTsKICAgICAgeWllbGQgewogICAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgICBhY3Rpb246ICdhcHBlbmQnLAogICAgICAgICAgZmlsZTogZmlsZS5uYW1lLAogICAgICAgICAgZGF0YTogYmFzZTY0LAogICAgICAgIH0sCiAgICAgIH07CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPQogICAgICAgICAgYCR7TWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCl9JSBkb25lYDsKICAgIH0KICB9CgogIC8vIEFsbCBkb25lLgogIHlpZWxkIHsKICAgIHJlc3BvbnNlOiB7CiAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgIH0KICB9Owp9CgpzY29wZS5nb29nbGUgPSBzY29wZS5nb29nbGUgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYiA9IHNjb3BlLmdvb2dsZS5jb2xhYiB8fCB7fTsKc2NvcGUuZ29vZ2xlLmNvbGFiLl9maWxlcyA9IHsKICBfdXBsb2FkRmlsZXMsCiAgX3VwbG9hZEZpbGVzQ29udGludWUsCn07Cn0pKHNlbGYpOwo=",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 93
        },
        "outputId": "59d2e122-20db-4fc9-9e0f-46e1929dc281"
      },
      "source": [
        "from google.colab import files\n",
        "\n",
        "uploaded = files.upload()\n",
        "\n",
        "for fn in uploaded.keys():\n",
        "  print('User uploaded file \"{name}\" with length {length} bytes'.format(\n",
        "      name=fn, length=len(uploaded[fn])))"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-439aa986-917a-4d2c-b42a-a53d82b90ff7\" name=\"files[]\" multiple disabled />\n",
              "     <output id=\"result-439aa986-917a-4d2c-b42a-a53d82b90ff7\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Saving total.txt to total.txt\n",
            "User uploaded file \"total.txt\" with length 1510267 bytes\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CSCnq0EGFguE",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Изучить временные ряды\n",
        "#+ проверить алгоритм деления по датам\n",
        "# Сделать первый прогноз\n",
        "# сделать интерпритацию результатов\n",
        "#+ повысить точность снизить потери\n",
        "# узнать про байес и как с ним работать\n",
        "# убрать парраметр объема\n",
        "\n",
        "import pandas\n",
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "tf.enable_eager_execution()\n",
        "\n",
        "period_of_chink = '2Y'\n",
        "test_size = 0.2\n",
        "epochs = 100\n",
        "expected_accuracy = 0.99\n",
        "\n",
        "\n",
        "class MyCallBack(tf.keras.callbacks.Callback):\n",
        "\n",
        "    def on_epoch_end(self, epoch, log={}):\n",
        "        if log.get('acc') > expected_accuracy:\n",
        "            print('\\nReached ', expected_accuracy * 100, 'accuracy, so cancelling training!')\n",
        "            self.model.stop_training = True\n",
        "\n",
        "def get_data_normalization(dataframe):\n",
        "\n",
        "    zscore = lambda x: (x - x.mean()) / x.std()\n",
        "    df_normalized = dataframe[['<OPEN>', '<HIGH>', '<LOW>', '<CLOSE>', '<VOL>']].transform(zscore)\n",
        "\n",
        "    return pandas.concat([dataframe[['<TICKER>', '<DATE>']], df_normalized], join='outer', axis=1)\n",
        "\n",
        "\n",
        "def get_answers_dataframe(dataframe: object) -> object:\n",
        "\n",
        "    def mask_first(x):\n",
        "        result = np.ones_like(x)\n",
        "        result[0] = 0\n",
        "        return result\n",
        "\n",
        "    def mask_last(x):\n",
        "        result = np.ones_like(x)\n",
        "        result[len(x) - 1] = 0\n",
        "        return result\n",
        "\n",
        "    dataframe_grouped = dataframe.groupby(by=['<TICKER>', pandas.Grouper(key='<DATE>',freq=period_of_chink)])\n",
        "\n",
        "    dataframe_mask = dataframe_grouped[['<OPEN>']].transform(mask_first).astype(bool)\n",
        "    answers_mask = dataframe_grouped[['<OPEN>']].transform(mask_last).astype(bool)\n",
        "\n",
        "    dataframe_for_return = dataframe[dataframe_mask['<OPEN>']].reset_index(drop=True)\n",
        "    answers_for_return = dataframe[answers_mask['<OPEN>']].reset_index(drop=True)\n",
        "\n",
        "    return dataframe_for_return, answers_for_return\n",
        "\n",
        "\n",
        "df = pandas.read_csv('total.txt',\n",
        "                                 delimiter=',',\n",
        "                                 parse_dates=['<DATE>'],\n",
        "                                 dtype={'<TICKER>': str,\n",
        "                                        '<OPEN>': float,\n",
        "                                        '<HIGH>': float,\n",
        "                                        '<LOW>': float,\n",
        "                                        '<CLOSE>': float,\n",
        "                                        '<VOL>': int},\n",
        "                                 decimal='.',\n",
        "                                 usecols=['<TICKER>', '<DATE>', '<OPEN>', '<HIGH>', '<LOW>', '<CLOSE>', '<VOL>']\n",
        "                                 )\n",
        "\n",
        "df.index.name = 'id'\n",
        "\n",
        "df = get_data_normalization(df)\n",
        "\n",
        "df, df_ans = get_answers_dataframe(df)\n",
        "\n",
        "# training_dataset = (\n",
        "#     tf.data.Dataset.from_tensor_slices(\n",
        "#         (\n",
        "#             tf.cast(df.values, tf.float32),\n",
        "#           # tf.cast(df_ans['<OPEN>'].values, tf.float32)\n",
        "#         )\n",
        "#     )\n",
        "# )\n",
        "\n",
        "training_dataset = df[['<OPEN>', '<HIGH>', '<LOW>', '<CLOSE>', '<VOL>']].values\n",
        "training_dataset_ans = df_ans[['<OPEN>', '<HIGH>', '<LOW>', '<CLOSE>', '<VOL>']].values\n",
        "#training_dataset_ans = df[['<OPEN>', '<HIGH>', '<LOW>', '<CLOSE>', '<VOL>']].values\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(\n",
        "    training_dataset,\n",
        "    training_dataset_ans,\n",
        "    test_size=test_size,\n",
        "    random_state=50,\n",
        "    shuffle=True\n",
        ")\n",
        "\n",
        "callbacks = MyCallBack()\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4Hm5ry0cGVSF",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "a86f51bd-e178-42ef-ec47-f38b8f262c00"
      },
      "source": [
        "\n",
        "model = tf.keras.models.Sequential([\n",
        "    tf.keras.layers.Dense(100, activation='relu', input_shape=(5,)),\n",
        "    tf.keras.layers.Dense(300, activation='relu'),\n",
        "    tf.keras.layers.Dense(300, activation='relu'),\n",
        "    tf.keras.layers.Dense(5, activation='linear'),\n",
        "])\n",
        "\n",
        "model.compile(optimizer='adam',\n",
        "              loss='mean_squared_error',\n",
        "              metrics=['accuracy']\n",
        "              )\n",
        "\n",
        "model.fit(X_train,\n",
        "          Y_train,\n",
        "          epochs=epochs,\n",
        "          callbacks=[callbacks]\n",
        "          )\n",
        "test_loss, test_acc = model.evaluate(X_test, Y_test)\n",
        "\n",
        "print(\"\\nFinally loss: %.2f, accuracy: %.2f\" % (test_loss, test_acc))\n"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "12884/12884 [==============================] - 1s 99us/sample - loss: 0.0467 - acc: 0.6281\n",
            "Epoch 2/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0306 - acc: 0.6214\n",
            "Epoch 3/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0305 - acc: 0.6485\n",
            "Epoch 4/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0286 - acc: 0.6441\n",
            "Epoch 5/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0295 - acc: 0.6466\n",
            "Epoch 6/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0273 - acc: 0.6370\n",
            "Epoch 7/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0272 - acc: 0.6545\n",
            "Epoch 8/100\n",
            "12884/12884 [==============================] - 1s 89us/sample - loss: 0.0288 - acc: 0.6443\n",
            "Epoch 9/100\n",
            "12884/12884 [==============================] - 1s 91us/sample - loss: 0.0276 - acc: 0.6529\n",
            "Epoch 10/100\n",
            "12884/12884 [==============================] - 1s 89us/sample - loss: 0.0276 - acc: 0.6502\n",
            "Epoch 11/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0282 - acc: 0.6553\n",
            "Epoch 12/100\n",
            "12884/12884 [==============================] - 1s 86us/sample - loss: 0.0278 - acc: 0.6546\n",
            "Epoch 13/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0284 - acc: 0.6521\n",
            "Epoch 14/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0312 - acc: 0.6500\n",
            "Epoch 15/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0280 - acc: 0.6541\n",
            "Epoch 16/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0272 - acc: 0.6572\n",
            "Epoch 17/100\n",
            "12884/12884 [==============================] - 1s 86us/sample - loss: 0.0270 - acc: 0.6479\n",
            "Epoch 18/100\n",
            "12884/12884 [==============================] - 1s 89us/sample - loss: 0.0259 - acc: 0.6493\n",
            "Epoch 19/100\n",
            "12884/12884 [==============================] - 1s 89us/sample - loss: 0.0264 - acc: 0.6527\n",
            "Epoch 20/100\n",
            "12884/12884 [==============================] - 1s 90us/sample - loss: 0.0262 - acc: 0.6552\n",
            "Epoch 21/100\n",
            "12884/12884 [==============================] - 1s 90us/sample - loss: 0.0276 - acc: 0.6468\n",
            "Epoch 22/100\n",
            "12884/12884 [==============================] - 1s 90us/sample - loss: 0.0271 - acc: 0.6562\n",
            "Epoch 23/100\n",
            "12884/12884 [==============================] - 1s 90us/sample - loss: 0.0260 - acc: 0.6522\n",
            "Epoch 24/100\n",
            "12884/12884 [==============================] - 1s 91us/sample - loss: 0.0267 - acc: 0.6600\n",
            "Epoch 25/100\n",
            "12884/12884 [==============================] - 1s 89us/sample - loss: 0.0261 - acc: 0.6555\n",
            "Epoch 26/100\n",
            "12884/12884 [==============================] - 1s 90us/sample - loss: 0.0261 - acc: 0.6579\n",
            "Epoch 27/100\n",
            "12884/12884 [==============================] - 1s 92us/sample - loss: 0.0250 - acc: 0.6574\n",
            "Epoch 28/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0257 - acc: 0.6541\n",
            "Epoch 29/100\n",
            "12884/12884 [==============================] - 1s 86us/sample - loss: 0.0252 - acc: 0.6501\n",
            "Epoch 30/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0248 - acc: 0.6556\n",
            "Epoch 31/100\n",
            "12884/12884 [==============================] - 1s 86us/sample - loss: 0.0257 - acc: 0.6577\n",
            "Epoch 32/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0257 - acc: 0.6541\n",
            "Epoch 33/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0257 - acc: 0.6519\n",
            "Epoch 34/100\n",
            "12884/12884 [==============================] - 1s 89us/sample - loss: 0.0257 - acc: 0.6554\n",
            "Epoch 35/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0247 - acc: 0.6581\n",
            "Epoch 36/100\n",
            "12884/12884 [==============================] - 1s 91us/sample - loss: 0.0251 - acc: 0.6547\n",
            "Epoch 37/100\n",
            "12884/12884 [==============================] - 1s 89us/sample - loss: 0.0261 - acc: 0.6563\n",
            "Epoch 38/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0251 - acc: 0.6624\n",
            "Epoch 39/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0249 - acc: 0.6513\n",
            "Epoch 40/100\n",
            "12884/12884 [==============================] - 1s 89us/sample - loss: 0.0261 - acc: 0.6523\n",
            "Epoch 41/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0250 - acc: 0.6503\n",
            "Epoch 42/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0253 - acc: 0.6506\n",
            "Epoch 43/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0256 - acc: 0.6536\n",
            "Epoch 44/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0248 - acc: 0.6545\n",
            "Epoch 45/100\n",
            "12884/12884 [==============================] - 1s 91us/sample - loss: 0.0246 - acc: 0.6514\n",
            "Epoch 46/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0246 - acc: 0.6600\n",
            "Epoch 47/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0244 - acc: 0.6587\n",
            "Epoch 48/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0251 - acc: 0.6548\n",
            "Epoch 49/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0251 - acc: 0.6597\n",
            "Epoch 50/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0245 - acc: 0.6577\n",
            "Epoch 51/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0254 - acc: 0.6589\n",
            "Epoch 52/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0235 - acc: 0.6592\n",
            "Epoch 53/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0244 - acc: 0.6597\n",
            "Epoch 54/100\n",
            "12884/12884 [==============================] - 1s 90us/sample - loss: 0.0247 - acc: 0.6616\n",
            "Epoch 55/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0244 - acc: 0.6541\n",
            "Epoch 56/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0250 - acc: 0.6544\n",
            "Epoch 57/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0245 - acc: 0.6538\n",
            "Epoch 58/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0240 - acc: 0.6527\n",
            "Epoch 59/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0234 - acc: 0.6561\n",
            "Epoch 60/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0245 - acc: 0.6532\n",
            "Epoch 61/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0263 - acc: 0.6480\n",
            "Epoch 62/100\n",
            "12884/12884 [==============================] - 1s 89us/sample - loss: 0.0246 - acc: 0.6594\n",
            "Epoch 63/100\n",
            "12884/12884 [==============================] - 1s 89us/sample - loss: 0.0242 - acc: 0.6591\n",
            "Epoch 64/100\n",
            "12884/12884 [==============================] - 1s 89us/sample - loss: 0.0242 - acc: 0.6589\n",
            "Epoch 65/100\n",
            "12884/12884 [==============================] - 1s 90us/sample - loss: 0.0250 - acc: 0.6600\n",
            "Epoch 66/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0243 - acc: 0.6638\n",
            "Epoch 67/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0247 - acc: 0.6611\n",
            "Epoch 68/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0237 - acc: 0.6554\n",
            "Epoch 69/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0254 - acc: 0.6597\n",
            "Epoch 70/100\n",
            "12884/12884 [==============================] - 1s 89us/sample - loss: 0.0244 - acc: 0.6666\n",
            "Epoch 71/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0235 - acc: 0.6638\n",
            "Epoch 72/100\n",
            "12884/12884 [==============================] - 1s 89us/sample - loss: 0.0248 - acc: 0.6642\n",
            "Epoch 73/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0236 - acc: 0.6656\n",
            "Epoch 74/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0241 - acc: 0.6613\n",
            "Epoch 75/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0246 - acc: 0.6581\n",
            "Epoch 76/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0240 - acc: 0.6586\n",
            "Epoch 77/100\n",
            "12884/12884 [==============================] - 1s 89us/sample - loss: 0.0246 - acc: 0.6582\n",
            "Epoch 78/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0241 - acc: 0.6597\n",
            "Epoch 79/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0243 - acc: 0.6537\n",
            "Epoch 80/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0242 - acc: 0.6551\n",
            "Epoch 81/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0244 - acc: 0.6617\n",
            "Epoch 82/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0244 - acc: 0.6593\n",
            "Epoch 83/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0240 - acc: 0.6571\n",
            "Epoch 84/100\n",
            "12884/12884 [==============================] - 1s 86us/sample - loss: 0.0245 - acc: 0.6552\n",
            "Epoch 85/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0242 - acc: 0.6541\n",
            "Epoch 86/100\n",
            "12884/12884 [==============================] - 1s 86us/sample - loss: 0.0233 - acc: 0.6628\n",
            "Epoch 87/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0244 - acc: 0.6599\n",
            "Epoch 88/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0248 - acc: 0.6568\n",
            "Epoch 89/100\n",
            "12884/12884 [==============================] - 1s 89us/sample - loss: 0.0236 - acc: 0.6572\n",
            "Epoch 90/100\n",
            "12884/12884 [==============================] - 1s 89us/sample - loss: 0.0238 - acc: 0.6592\n",
            "Epoch 91/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0239 - acc: 0.6597\n",
            "Epoch 92/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0240 - acc: 0.6579\n",
            "Epoch 93/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0235 - acc: 0.6594\n",
            "Epoch 94/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0238 - acc: 0.6593\n",
            "Epoch 95/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0241 - acc: 0.6633\n",
            "Epoch 96/100\n",
            "12884/12884 [==============================] - 1s 89us/sample - loss: 0.0237 - acc: 0.6655\n",
            "Epoch 97/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0240 - acc: 0.6613\n",
            "Epoch 98/100\n",
            "12884/12884 [==============================] - 1s 87us/sample - loss: 0.0236 - acc: 0.6607\n",
            "Epoch 99/100\n",
            "12884/12884 [==============================] - 1s 88us/sample - loss: 0.0246 - acc: 0.6585\n",
            "Epoch 100/100\n",
            "12884/12884 [==============================] - 1s 89us/sample - loss: 0.0240 - acc: 0.6563\n",
            "3221/3221 [==============================] - 0s 40us/sample - loss: 0.0207 - acc: 0.6532\n",
            "\n",
            "Finally loss: 0.02, accuracy: 0.65\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}